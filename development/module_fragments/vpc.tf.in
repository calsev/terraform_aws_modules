{% import 'development/module_fragments/name.tf.in' as name %}

{% macro var_item(vpc=True, az=True, sg=True, seg=True) -%}
  {{ [
    ("vpc_az_key_list             = optional(list(string))", az),
    ("vpc_key                     = optional(string)", vpc),
    ("vpc_security_group_key_list = optional(list(string))", sg),
    ("vpc_segment_key             = optional(string)", seg)
  ] | conditional_lines }}
{%- endmacro %}

{% macro var(precedence="_default", az=None, az_desc=None, map_default=None, map_desc=None, vpc=None, vpc_default=True, sg=None, sg_desc=None, seg=None, seg_desc=None) -%}
{% if az != False %}variable "vpc_az_key_list{{ precedence }}" {
  type        = list(string)
  default     = {{ (["a", "b"] if az is none else az) | tf_list }}{% if az_desc != None %}
  description = "{{ az_desc }}"{% endif %}
}

{% endif %}variable "vpc_data_map" {
  type = map(object({
    name_simple           = string
    security_group_id_map = map(string)
    segment_map = map(object({
      route_public  = bool
      subnet_id_map = map(string)
      subnet_map = map(object({
        availability_zone_name = string
      }))
    }))
    vpc_assign_ipv6_cidr = bool
    vpc_cidr_block        = string
    vpc_id                = string
    vpc_ipv6_cidr_block   = string
  })){% if map_default != None %}
  default     = {{ map_default }}{% endif %}{% if map_desc %}
  description = "{{ map_desc }}"{% endif %}
}{% if vpc != False %}

variable "vpc_key{{ precedence }}" {
  type    = string{% if vpc_default != False %}
  default = {{ '"' ~ (vpc) ~ '"' if vpc else "null" }}{% endif %}
}{% endif %}{% if sg != False %}

variable "vpc_security_group_key_list{{ precedence }}" {
  type        = list(string)
  default     = {{ (["world_all_out"] if sg is none else sg) | tf_list }}{% if sg_desc %}
  description = "{{ sg_desc }}"{% endif %}
}{% endif %}{% if seg != False %}

variable "vpc_segment_key{{ precedence }}" {
  type        = string
  default     = {{ "null" if seg == "null" else '"' ~ (seg or "internal") ~ '"' }}{% if seg_desc %}
  description = "{{ seg_desc }}"{% endif %}
}{% endif %}
{%- endmacro %}

{% macro map(source_map="local.l0_map", vpc=True, az=True, sg=True, seg=True) -%}
module "vpc_map" {
  source                              = "{{ module_up }}/vpc/id_map"{% if az != False %}
  vpc_az_key_list_default             = var.vpc_az_key_list_default{% endif %}
  vpc_data_map                        = var.vpc_data_map{% if vpc != False %}
  vpc_key_default                     = var.vpc_key_default{% endif %}
  vpc_map                             = {{ source_map }}{% if sg != False %}
  vpc_security_group_key_list_default = var.vpc_security_group_key_list_default{% endif %}{% if seg != False %}
  vpc_segment_key_default             = var.vpc_segment_key_default{% endif %}
}
{%- endmacro %}

{% macro map_item(precedence="_default", source="var", append=None, vpc=True, az=True, sg=True, sg_sub="", seg=True) -%}
    {% if az != False %}vpc_az_key_list_default             = {{ source }}.vpc_az_key_list{{ precedence }}
    {% endif %}vpc_data_map                        = {{ source }}.vpc_data_map{% if vpc != False %}
    vpc_key_default                     = {{ source }}.vpc_key{{ precedence }}{% endif %}{% if sg != False %}
    vpc_security_group_key_list_default = {{ source }}.vpc_security_group_key_list{{ sg_sub }}{{ precedence }}{% endif %}{% if seg != False %}
    vpc_segment_key_default             = {{ source }}.vpc_segment_key{{ precedence }}{% endif %}
{%- endmacro %}

{% macro endpoint_map_default() -%}
variable "endpoint_map_custom_default" {
  type = map(object({
    auto_accept_enabled  = optional(bool)
    dns_record_ip_type   = optional(string)
    endpoint_segment_key = optional(string)
    endpoint_subnet_map = optional(map(object({
      # Optional addresses, for Gateway endpoints only
      ipv4_address = optional(string)
      ipv6_address = optional(string)
    })), {})
    endpoint_type                                  = optional(string)
    iam_policy_json                                = optional(string)
    ip_address_type                                = optional(string)
    {{ name.var_item() }}
    private_dns_enabled                            = optional(bool)
    private_dns_for_inbound_resolver_endpoint_only = optional(bool)
    service_name_override                          = optional(string)
    service_name_short                             = optional(string)
    vpc_security_group_key_list                    = optional(list(string))
  }))
  default = {}
  description = "These endoints are merged with standard defaults"
}

variable "endpoint_map_standard_default" {
  type = map(object({
    auto_accept_enabled  = optional(bool)
    dns_record_ip_type   = optional(string)
    endpoint_segment_key = optional(string)
    endpoint_subnet_map = optional(map(object({
      # Optional addresses, for Gateway endpoints only
      ipv4_address = optional(string)
      ipv6_address = optional(string)
    })), {})
    endpoint_type                                  = optional(string)
    iam_policy_json                                = optional(string)
    ip_address_type                                = optional(string)
    {{ name.var_item() }}
    private_dns_enabled                            = optional(bool)
    private_dns_for_inbound_resolver_endpoint_only = optional(bool)
    service_name_override                          = optional(string)
    service_name_short                             = optional(string)
    vpc_security_group_key_list                    = optional(list(string))
  }))
  default = {
    ec2 = {
      auto_accept_enabled                            = null
      dns_record_ip_type                             = null
      endpoint_segment_key                           = null
      endpoint_subnet_map                            = {}
      endpoint_type                                  = null
      iam_policy_json                                = null
      ip_address_type                                = "ipv4"
      {{ name.var_item(type="null") }}
      private_dns_enabled                            = null
      private_dns_for_inbound_resolver_endpoint_only = null
      service_name_override                          = null
      service_name_short                             = null
      vpc_security_group_key_list                    = null
    }
    "ecr.api" = {
      auto_accept_enabled                            = null
      dns_record_ip_type                             = null
      endpoint_segment_key                           = null
      endpoint_subnet_map                            = {}
      endpoint_type                                  = null
      iam_policy_json                                = null
      ip_address_type                                = "ipv4"
      {{ name.var_item(type="null") }}
      private_dns_enabled                            = null
      private_dns_for_inbound_resolver_endpoint_only = null
      service_name_override                          = null
      service_name_short                             = null
      vpc_security_group_key_list                    = null
    }
    "ecr.dkr" = {
      auto_accept_enabled                            = null
      dns_record_ip_type                             = null
      endpoint_segment_key                           = null
      endpoint_subnet_map                            = {}
      endpoint_type                                  = null
      iam_policy_json                                = null
      ip_address_type                                = "ipv4"
      {{ name.var_item(type="null") }}
      private_dns_enabled                            = null
      private_dns_for_inbound_resolver_endpoint_only = null
      service_name_override                          = null
      service_name_short                             = null
      vpc_security_group_key_list                    = null
    }
    ssm = {
      auto_accept_enabled                            = null
      dns_record_ip_type                             = null
      endpoint_segment_key                           = null
      endpoint_subnet_map                            = {}
      endpoint_type                                  = null
      iam_policy_json                                = null
      ip_address_type                                = "ipv4"
      {{ name.var_item(type="null") }}
      private_dns_enabled                            = null
      private_dns_for_inbound_resolver_endpoint_only = null
      service_name_override                          = null
      service_name_short                             = null
      vpc_security_group_key_list                    = null
    }
    ssm-contacts = {
      auto_accept_enabled                            = null
      dns_record_ip_type                             = null
      endpoint_segment_key                           = null
      endpoint_subnet_map                            = {}
      endpoint_type                                  = null
      iam_policy_json                                = null
      ip_address_type                                = "dualstack"
      {{ name.var_item(type="null") }}
      private_dns_enabled                            = null
      private_dns_for_inbound_resolver_endpoint_only = null
      service_name_override                          = null
      service_name_short                             = null
      vpc_security_group_key_list                    = null
    }
    ssm-incidents = {
      auto_accept_enabled                            = null
      dns_record_ip_type                             = null
      endpoint_segment_key                           = null
      endpoint_subnet_map                            = {}
      endpoint_type                                  = null
      iam_policy_json                                = null
      ip_address_type                                = "dualstack"
      {{ name.var_item(type="null") }}
      private_dns_enabled                            = null
      private_dns_for_inbound_resolver_endpoint_only = null
      service_name_override                          = null
      service_name_short                             = null
      vpc_security_group_key_list                    = null
    }
  }
  description = "These endoints are required to avoid security violations, and are merged with custom defaults"
}
{%- endmacro %}
