{{ name.map() }}

locals {
  create_lambda_map = {
    for k, v in local.lx_map : k => merge(v, {
      role_policy_attach_arn_map = {
        secret_read = module.secret.data[k].policy_map["read"].iam_policy_arn
      }
      source_content_path_of_file_to_create_in_archive = "accept_vulnerability.py"
      source_package_created_archive_path              = "${path.root}/config/${k}.zip"
      source_content_string = templatefile("${path.module}/app/accept_vulnerability.py", {
        secret_id                     = module.secret.data[k].secret_id
        severity_level_list_to_accept = join(",", v.severity_level_list_to_accept)
      })
    })
  }
  create_trigger_map = {
    for k, v in local.create_lambda_map : k => merge(v, {
        role_policy_attach_arn_map = {
          invoke_lambda = module.lambda.data[k].policy_map["write"].iam_policy_arn
        }
        schedule_expression = var.event_schedule_expression_default
        target_arn          = module.lambda.data[k].lambda_arn
      })
  }
  l0_map = {
    vulnerability_accepter = {}
  }
  l1_map = {
    for k, v in local.l0_map : k => merge(v, module.name_map.data[k], {
      severity_level_list_to_accept = var.severity_level_list_to_accept
    })
  }
  l2_map = {
    for k, v in local.l0_map : k => {
    }
  }
  lx_map = {
    for k, _ in local.l0_map : k => merge(local.l1_map[k], local.l2_map[k])
  }
  output_data = {
    for k, v in local.lx_map : k => merge(
      {
        for k_attr, v_attr in v : k_attr => v_attr if !contains(["source_content_string"], k_attr)
      },
      {
        lambda  = module.lambda.data[k]
        secret  = module.secret.data[k]
        trigger = module.trigger.data[k]
      }
    )
  }
}
