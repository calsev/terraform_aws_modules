variable "alert_level_default" {
  type    = string
  default = "general_medium"
}

variable "elb_target_data_map" {
  type = map(object({
    target_group_arn = string
  }))
  default     = null
  description = "Must be provided if any ASG has an attached ELB"
}

variable "group_map" {
  type = map(object({
    {{ alarm.var_item() }}
    auto_scaling_iam_role_arn_service_linked    = optional(string)
    auto_scaling_num_instances_max              = optional(number)
    auto_scaling_num_instances_min              = optional(number)
    auto_scaling_protect_from_scale_in          = optional(bool)
    elb_target_group_key_list                   = optional(list(string))
    health_check_type                           = optional(string)
    instance_maintenance_max_healthy_percentage = optional(number)
    instance_maintenance_min_healthy_percentage = optional(number)
    launch_template_id                          = optional(string)
    {{ name.var_item() }}
    placement_group_id                          = optional(string)
    suspended_processes                         = optional(list(string))
    {{ vpc.var_item() }}
  }))
}

variable "group_alarm_map_default" {
  {{ alarm.var_default_type() }}
  default = {
    cpu_utilization = {
      alarm_action_enabled                = null
      alarm_description                   = "Alarm when CPU utilization is high for asg %s"
      alarm_name                          = "CPU Usage for %s"
      alert_level                         = null
      metric_name                         = "CPUUtilization"
      metric_namespace                    = "AWS/EC2"
      statistic_comparison_operator       = "GreaterThanThreshold"
      statistic_evaluation_period_count   = 2
      statistic_evaluation_period_seconds = 300
      statistic_for_metric                = "Average"
      statistic_threshold_percentile      = null
      statistic_threshold_value           = 80
    }
  }
}

variable "group_auto_scaling_iam_role_arn_service_linked_default" {
  type    = string
  default = null
}

variable "group_auto_scaling_num_instances_max_default" {
  type    = number
  default = 1
}

variable "group_auto_scaling_num_instances_min_default" {
  type    = number
  default = 0
}

variable "group_auto_scaling_protect_from_scale_in_default" {
  type        = bool
  default     = true
  description = "This is required for managed termination protection in ECS"
}

variable "group_elb_target_group_key_list_default" {
  type        = list(string)
  default     = []
  description = "This value is typically used with instance auto scaling. For ECS the target group is attached to the service."
}

variable "group_health_check_type_default" {
  type        = string
  default     = null
  description = "Defaults to EC2 if no target is attached, otherwise ELB. Must be set to ELB manually for any service attached to an ELB."
  validation {
    condition     = var.group_health_check_type_default == null ? true : contains(["EC2", "ELB"], var.group_health_check_type_default)
    error_message = "Invalid health check type"
  }
}

variable "group_instance_maintenance_max_healthy_percentage_default" {
  type    = number
  default = 200
}

variable "group_instance_maintenance_min_healthy_percentage_default" {
  type    = number
  default = 100
}

variable "group_launch_template_id_default" {
  type    = string
  default = null
}

variable "group_placement_group_id_default" {
  type    = string
  default = null
}

variable "group_suspended_processes_default" {
  type    = list(string)
  default = []
  validation {
    condition = length(setsubtract(var.group_suspended_processes_default, [
      "AddToLoadBalancer",
      "AlarmNotification",
      "AZRebalance",
      "HealthCheck",
      "InstanceRefresh",
      "Launch",
      "ReplaceUnhealthy",
      "ScheduledActions",
      "Terminate",
    ])) == 0
    error_message = "Invalid suspended processes"
  }
}

variable "monitor_data" {
  type = object({
    alert = object({
      topic_map = map(object({
        topic_arn = string
      }))
    })
  })
}

{{ name.var(app_fields=False) }}

{{ std.map() }}

{{ vpc.var() }}
